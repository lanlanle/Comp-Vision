void R2Image::
svdTest(void)
{

  R2Point a1(0,0);
  R2Point a2(1,0);
  R2Point a3(1,1);
  R2Point a4(0,1);

  vector<R2Point> original_vector;

  original_vector.push_back(a1);
  original_vector.push_back(a2);
  original_vector.push_back(a3);
  original_vector.push_back(a4);

  // R2Point b1(1,0);
  // R2Point b2(2,0);
  // R2Point b3(2,1);
  // R2Point b4(1,1);

  R2Point b1(1,2);
  R2Point b2(1,1);
  R2Point b3(3,1);
  R2Point b4(3,2);

  vector<R2Point> transformed_vector;

  transformed_vector.push_back(b1);
  transformed_vector.push_back(b2);
  transformed_vector.push_back(b3);
  transformed_vector.push_back(b4);


  // construct the A matrix 
  vector < vector <double> > A;


  double** linEquations = dmatrix(1,8,1,9);

  for (int i = 0; i<original_vector.size();i++) {
    vector <double> equation1;

    linEquations[i*2+1][1] = 0.0;
    linEquations[i*2+1][2] = 0.0;
    linEquations[i*2+1][3] = 0.0;
    linEquations[i*2+1][4] = -original_vector[i][0];
    linEquations[i*2+1][5] = -original_vector[i][1];
    linEquations[i*2+1][6] = -1.0;
    linEquations[i*2+1][7] = transformed_vector[i][1]*original_vector[i][0];
    linEquations[i*2+1][8] = transformed_vector[i][1]*original_vector[i][1];
    linEquations[i*2+1][9] = transformed_vector[i][1];

    equation1.push_back(0.0);
    equation1.push_back(0.0);
    equation1.push_back(0.0);
    equation1.push_back(-original_vector[i][0]);
    equation1.push_back(-original_vector[i][1]);
    equation1.push_back(-1.0);
    equation1.push_back(transformed_vector[i][1]*original_vector[i][0]);
    equation1.push_back(transformed_vector[i][1]*original_vector[i][0]);
    equation1.push_back(transformed_vector[i][1]);

    A.push_back(equation1);


    vector<double> equation2;

    linEquations[i*2+2][1] = original_vector[i][0];
    linEquations[i*2+2][2] = original_vector[i][1];
    linEquations[i*2+2][3] = 1.0;
    linEquations[i*2+2][4] = 0.0;
    linEquations[i*2+2][5] = 0.0;
    linEquations[i*2+2][6] = 0.0;
    linEquations[i*2+2][7] = -transformed_vector[i][0]*original_vector[i][0];
    linEquations[i*2+2][8] = -transformed_vector[i][0]*original_vector[i][1];
    linEquations[i*2+2][9] = -transformed_vector[i][0];

    equation2.push_back(original_vector[i][0]);
    equation2.push_back( original_vector[i][1]);
    equation2.push_back(1.0);
    equation2.push_back(0.0);
    equation2.push_back(0.0);
    equation2.push_back(0.0);
    equation2.push_back( -transformed_vector[i][0]*original_vector[i][0]);
    equation2.push_back( -transformed_vector[i][0]*original_vector[i][1]);
    equation2.push_back( -transformed_vector[i][0]);
    A.push_back(equation2);



  }

  //print A matrix

  cout << "A MATRIX: " << endl;

  for (int i = 0; i < 8; i++){
    cout<< A[i][0]<< " "<< A[i][1]<< " "<< A[i][2]<< " "<< A[i][3]<< " "<< A[i][4]<< " "<< A[i][5]<< " "<< A[i][6]<< " "<< A[i][7]<< " "<< A[i][8]<< endl;
  }
  cout << " " << endl;


  // // compute the SVD
  double singularValues[10]; // 1..6
  double** nullspaceMatrix = dmatrix(1,9,1,9);
  svdcmp(linEquations, 8, 9, singularValues, nullspaceMatrix);


  for (int i = 1; i<=9; i++) {
    cout << "Singular Values " << i << ": " << singularValues[i] << endl;
  }
   cout << " " << endl;

  // find the smallest singular value:
  int smallestIndex = 1;
  for(int i=2;i<=9;i++) if(singularValues[i]<singularValues[smallestIndex]) smallestIndex=i;

  // // solution is the nullspace of the matrix, which is the column in V corresponding to the smallest singular value (which should be 0)
  // printf("Conic coefficients: %f, %f, %f, %f, %f, %f\n",nullspaceMatrix[1][smallestIndex],nullspaceMatrix[2][smallestIndex],nullspaceMatrix[3][smallestIndex],nullspaceMatrix[4][smallestIndex],nullspaceMatrix[5][smallestIndex],nullspaceMatrix[6][smallestIndex]);

   for (int i = 1; i<=9; i++) {
    cout << "The H value " << i << ": " << nullspaceMatrix[i][smallestIndex] << endl;
  }
   cout << " " << endl;


  //make sure the algs are correct 
  for (int i = 0; i < 8; i++) {
    double result = A[i][0]*nullspaceMatrix[1][smallestIndex]+
                    A[i][1]*nullspaceMatrix[2][smallestIndex]+
                    A[i][2]*nullspaceMatrix[3][smallestIndex]+
                    A[i][3]*nullspaceMatrix[4][smallestIndex]+
                    A[i][4]*nullspaceMatrix[5][smallestIndex]+
                    A[i][5]*nullspaceMatrix[6][smallestIndex]+
                    A[i][6]*nullspaceMatrix[7][smallestIndex]+
                    A[i][7]*nullspaceMatrix[8][smallestIndex]+
                    A[i][8]*nullspaceMatrix[9][smallestIndex];

      cout << "Equation " << i+1 << ": " << result << endl;

  }



}
