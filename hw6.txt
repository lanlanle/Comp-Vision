void R2Image::
blendOtherImageTranslated(R2Image * otherImage)
{
  // find at least 100 features on this image, and another 100 on the "otherImage". Based on these,
  // compute the matching translation (pixel precision is OK), and blend the translated "otherImage" 
  // into this image with a 50% opacity.

  vector<vector<double>> imgA_features = otherImage->Harris(2.0);

  vector<vector<double> > matching_features;

  
  int searchAreaHalfWidth = width * 0.1;
  int searchAreaHalfHeight = height * 0.1;
   cout << searchAreaHalfWidth << endl;
   cout << searchAreaHalfHeight << endl;

  //search for all feature in vector
  for (int feature = 0; feature < imgA_features.size(); feature++) {
    double minSum = 100000; 
    double minX = 0;
    double minY = 0;
    for (int i = -searchAreaHalfWidth; i <=searchAreaHalfWidth;i++) {
      for (int j = -searchAreaHalfHeight; j <= searchAreaHalfHeight; j++) {

        if (imgA_features[feature][1]+i >= 0 && imgA_features[feature][1]+i< width &&
                imgA_features[feature][2]+j>=0 && imgA_features[feature][2]+j<height){

                 // start a window
                  R2Pixel *ssd = new R2Pixel();
                  for (int k = -3; k <=3; k++) {
                    for (int l = -3; l <=3; l++) {
                      if (imgA_features[feature][1]+k >= 0 && imgA_features[feature][1]+k < width &&
                          imgA_features[feature][2]+l >=0 && imgA_features[feature][2]+l < height &&
                          imgA_features[feature][1]+i+k >= 0 && imgA_features[feature][1]+i+k < width &&
                          imgA_features[feature][2]+j+l>=0 && imgA_features[feature][2]+j+l<height) 
             
                          *ssd += (otherImage->Pixel(imgA_features[feature][1]+k,imgA_features[feature][2]+l)-Pixel(imgA_features[feature][1]+i+k,imgA_features[feature][2]+j+l))*(otherImage->Pixel(imgA_features[feature][1]+k,imgA_features[feature][2]+l)-Pixel(imgA_features[feature][1]+i+k,imgA_features[feature][2]+j+l));          
                      
                    }
                  }
                  double sum = ssd->Red()+ssd->Green()+ssd->Blue();

                  if (sum < minSum) {
                    minSum = sum; 
                    minX = imgA_features[feature][1]+i;
                    minY = imgA_features[feature][2]+j;
                  
                  }


        }
    
       
        
      }
    }

    vector<double> item;
    item.push_back(minX);
    item.push_back(minY);
    matching_features.push_back(item);
  }

  //draw

  for (int pixel = 0; pixel< matching_features.size();pixel++) {
    
       line(imgA_features[pixel][1],matching_features[pixel][0],imgA_features[pixel][2],matching_features[pixel][1],0,1,0);
      
    
  }
  
}