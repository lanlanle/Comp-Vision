void R2Image::
blendOtherImageHomography(R2Image * otherImage)
{
	// find at least 100 features on this image, and another 100 on the "otherImage". Based on these,
	// compute the matching homography, and blend the transformed "otherImage" into this image with a 50% opacity.
	// fprintf(stderr, "fit other image using a homography and blend imageB over imageA\n");
	// return;



  //PRODUCE 150 VECTOR TRANSLATION 




  vector<vector<double>> imgA_features = otherImage->Harris(2.0);

  vector<vector<double> > matching_features;

  
  int searchAreaHalfWidth = width * 0.1;
  int searchAreaHalfHeight = height * 0.1;
   cout << searchAreaHalfWidth << endl;
   cout << searchAreaHalfHeight << endl;

  //search for all feature in vector
  for (int feature = 0; feature < imgA_features.size(); feature++) {
    double minSum = 100000; 
    double minX = 0;
    double minY = 0;
    for (int i = -searchAreaHalfWidth; i <=searchAreaHalfWidth;i++) {
      for (int j = -searchAreaHalfHeight; j <= searchAreaHalfHeight; j++) {

        if (imgA_features[feature][1]+i >= 0 && imgA_features[feature][1]+i< width &&
                imgA_features[feature][2]+j>=0 && imgA_features[feature][2]+j<height){

                 // start a window
                  R2Pixel *ssd = new R2Pixel();
                  for (int k = -3; k <=3; k++) {
                    for (int l = -3; l <=3; l++) {
                      if (imgA_features[feature][1]+k >= 0 && imgA_features[feature][1]+k < width &&
                          imgA_features[feature][2]+l >=0 && imgA_features[feature][2]+l < height &&
                          imgA_features[feature][1]+i+k >= 0 && imgA_features[feature][1]+i+k < width &&
                          imgA_features[feature][2]+j+l>=0 && imgA_features[feature][2]+j+l<height) 
             
                          *ssd += (otherImage->Pixel(imgA_features[feature][1]+k,imgA_features[feature][2]+l)-Pixel(imgA_features[feature][1]+i+k,imgA_features[feature][2]+j+l))*(otherImage->Pixel(imgA_features[feature][1]+k,imgA_features[feature][2]+l)-Pixel(imgA_features[feature][1]+i+k,imgA_features[feature][2]+j+l));          
                      
                    }
                  }
                  double sum = ssd->Red()+ssd->Green()+ssd->Blue();

                  if (sum < minSum) {
                    minSum = sum; 
                    minX = imgA_features[feature][1]+i;
                    minY = imgA_features[feature][2]+j;
                  
                  }
        }  
        
      }
    }

    vector<double> item;
    item.push_back(minX);
    item.push_back(minY);
    matching_features.push_back(item);
  }



  // use random to find a vector item 
  int max_inlier = 0;
  vector < vector<double> > max_inlier_set;
  vector < vector<double> > min_outlier_set; 
  vector <double> best_H_matrix; 




  // create the model of H matrix first here 



  for (int trial=0; trial < 1000; trial++) {

  vector<double> hValuesBA = svdHelper(imgA_features,matching_features);
  cout << " " << endl;


  //COMPARE TO SEE IF THE TRANSLATION IS CORRECT 

  vector<vector<double> > inlier;
  vector <vector<double> > outlier;   
  for (int i = 0; i < matching_features.size(); i++)   {
        
        double xB = hValuesBA[0]*imgA_features[i][1]+hValuesBA[1]*imgA_features[i][2]+hValuesBA[2];
        double yB = hValuesBA[3]*imgA_features[i][1]+hValuesBA[4]*imgA_features[i][2]+hValuesBA[5];
        double wB = hValuesBA[6]*imgA_features[i][1]+hValuesBA[7]*imgA_features[i][2]+hValuesBA[8];
       
        
        double scaled_xB = xB/wB;
        double scaled_yB = yB/wB; 

       
        double distance = sqrt(pow(matching_features[i][0]-scaled_xB,2)+pow(matching_features[i][1]-scaled_yB,2));

        cout << distance << endl;

        vector<double> motion_vector;
        motion_vector.push_back(imgA_features[i][1]);
        motion_vector.push_back(matching_features[i][0]);
        motion_vector.push_back(imgA_features[i][2]);
        motion_vector.push_back(matching_features[i][1]);

        if ( distance <=5) inlier.push_back(motion_vector);
        else outlier.push_back(motion_vector);
    }
    
    if (inlier.size() > max_inlier){
        max_inlier = inlier.size();
        max_inlier_set.clear();
        min_outlier_set.clear();
    
        for (int a= 0; a < inlier.size(); a++) max_inlier_set.push_back(inlier[a]);
        for (int b= 0; b < outlier.size(); b++) min_outlier_set.push_back(outlier[b]);
        for (int d = 0; d<9; d++) best_H_matrix.push_back(hValuesBA[d]);

    }

  }
  cout <<"INLIER: " << max_inlier << endl;


  //use best inverse matrix to reconstruct a new image 
   cout << " MATRIX_VALUES" << endl;
  for (int i = 0; i < 9; i++) cout << best_H_matrix[i] << " ";
  cout << " " << endl;
  for (int i = 0; i < 9; i++) cout << best_inverse[i] << " ";



  //compute matrix inverse
  vector<vector <double>> mat; 
  for (int i= 0; i<3;i++) {
    vector<double> line;
    for (int j= 0;j<3; j++) {
      line.push_back(best_H_matrix[3*i+j]);
    }
    mat.push_back(line);
  }


  vector<double>inverse_mat;
  float determinant = 0;

  //finding determinant
  for(int i = 0; i < 3; i++)
        determinant = determinant + (mat[0][i] * (mat[1][(i+1)%3] * mat[2][(i+2)%3] - mat[1][(i+2)%3] * mat[2][(i+1)%3]));
    
    cout<<"\n\ndeterminant: "<<determinant;
    
    cout<<"\n\nInverse of matrix is: \n";
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < 3; j++){
          double val = ((mat[(j+1)%3][(i+1)%3] * mat[(j+2)%3][(i+2)%3]) - (mat[(j+1)%3][(i+2)%3] * mat[(j+2)%3][(i+1)%3]))/ determinant;
          cout<<((mat[(j+1)%3][(i+1)%3] * mat[(j+2)%3][(i+2)%3]) - (mat[(j+1)%3][(i+2)%3] * mat[(j+2)%3][(i+1)%3]))/ determinant<<"\t";
          inverse_mat.push_back(val);

        } 
        cout<<"\n";
    }



  for (int i = 0; i < width; i++){
    for (int j = 0; j < height; j++) {
      double xA = inverse_mat[0]*i + inverse_mat[1]*j + inverse_mat[2];
      double yA = inverse_mat[3]*i + inverse_mat[4]*j + inverse_mat[5];
      double wA = inverse_mat[6]*i + inverse_mat[7]*j + inverse_mat[8];


      double scaled_xA = xA/wA;
      double scaled_yA = yA/wA;
      // cout << scaled_xA << " "<< scaled_yA << endl;


      if (scaled_xA>0 && scaled_xA < width && scaled_yA >0 && scaled_yA<height){
          double red = Pixel(scaled_xA,scaled_yA).Red();
          double green = Pixel(scaled_xA,scaled_yA).Green();
          double blue = Pixel(scaled_xA,scaled_yA).Blue();
          line(i,i,j,j,red,green,blue);
      }
    }
  }

}